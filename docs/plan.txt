instr[0] == 0 => User registration
    1. Create user's game account
    2. Set signin bit in player's account


instr[0] == 1 => User login
    1. Set signin bit in player's account


instr[0] == 2 => User logout
    1. Reset signin bit in player's account


instr[0] == 3 => Invite someone for a game
    1. Get the opponent id from the instruction (instr[1..]).
    2. Check if the oppnent is free, otherwise throw error.
    3. Put the opponent id into the relevant field of the player account.
    4. Put the current user id as the opponent id in the opponent's account.


instr[0] == 4 & instr[1] == 0 => Reject game invite
    1. Clear game state & opponent fields of the opponent's account.
    2. Clear game state & opponent fields of the current user account.


instr[0] == 4 & instr[1] == 1 => Accept game invite
    1. Create a game account pda (starting with the small user wallet first).
    2. Whoever starts the game must be put in player1
    3. Set the opponents game state to 2.
    4. Set the current user's game state to 2.


instr[0] == 5 => User gameplay
    instr[1]: Box index
    1. Confirm that it's the user's turn to play.
    2. Set the box index at the relevant place in the game account.


instr[0] == 6 => Close game account
    1. Check if the game account exists.
    2. Only one of the player has to signal closing the game account.
    3. Check if the account_data[64] is in the set {10, 11, 12}.
       If not, make the closing user lose the game and do the close.
    4. Transfer the game account sols to the relevant accounts.
    5. Close the game account.


instr[0] == 7 => Close user account
    1. Check if the game account exists.
    2. If the user is currently playing a game, mark it as if the user "lost"
       and do the related sol transfers.
    3. Transfer the user account sols to the relevant account
    4. Close the user account.
